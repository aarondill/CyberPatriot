#!/usr/bin/env bash

# ~/.bashrc.d/30_functions/sudo
#
# set up sudo override for QOE

# only do these if sudo exists
if ! command -v sudo &>/dev/null; then
  return
fi

function _run_sudo() (
  # These will only be available if sudo -e is given. But, in that case, it will help avoid writing to $HOME
  export XDG_STATE_HOME=~root/.local/state XDG_CACHE_HOME=~root/.cache
  # export XDG_DATA_HOME=~root/.local/share XDG_CONFIG_HOME=~root/.config
  if [ -n "${SUDO_VERBOSE:-}" ]; then printf "'%s' " sudo "$@" && printf '\n'; fi
  exec sudo "$@" # subshell
)
# could break if passed `sudo -o option_arg`
# Can't fix that without parsing all of sudo's arguments correctly
function sudo() {
  # which is not available, or no command has been passed
  if [ "$#" -eq 0 ] || ! command -v which &>/dev/null; then
    _run_sudo "$@"
    return "$?"
  fi

  local path cmd old_args=() args=()
  while [ "$#" -gt 0 ]; do
    case "$1" in
    --) break ;;
    -*) old_args+=("$1") && shift ;;
    *) break ;;
    esac
  done

  if [ "$#" -eq 0 ] || [ -z "${1:-}" ]; then
    _run_sudo "${old_args[@]}" "$@" # options have been shifted off.
    return "$?"
  fi

  cmd="$1"
  # can't use command -v because aliases and functions
  path="$(which -- "$cmd" 3>/dev/null || printf '')"
  # use -e instead of -x because root may be able to execute it
  if [ -e "$path" ] || [ -L "$path" ]; then cmd="$path"; fi
  # remove cmd, then replace with new value
  args=("${old_args[@]}" "$cmd" "${@:2}")

  _run_sudo "${args[@]}"
  return "$?"
}
