#!/usr/bin/env bash

# ~/.bashrc.d/30_functions/fp
#
# Sets up fp function for fuzzy finding files, and
# fpd function to fuzzy find directories. Each command displays a
# preview through bat/cat and tree/ls respectively.
#
# Also sets default fzf command for direct invocations
#
# By default is colorized, but can be disabled by unsetting FZF_USE_COLOR
# Important: Also unset FZF_DEFAULT_OPTS to accelerate scanning!
#

# only do these if fzf exists
command -v fzf &>/dev/null || return 0
# Allow color, slows down scanning!
export FZF_USE_COLOR=true
export FZF_DEFAULT_OPTS='--ansi'

function FZF_BASE_COMMAND() { find "$@"; }
function FZF_FIND_DIR() { FZF_BASE_COMMAND --type d "$@"; }
function FZF_FIND_FILE() { FZF_BASE_COMMAND --type f "$@"; }
# Use better find if installed
if command -v fd &>/dev/null; then
  function FZF_BASE_COMMAND() {
    local color=()
    [ -z "$FZF_USE_COLOR" ] || color+=("--color=always")
    fd "${color[@]}" --follow --hidden --exclude .git "$@"
  }
  function FZF_FIND_DIR() { FZF_BASE_COMMAND "${color[@]}" --type d . "$@"; }
  function FZF_FIND_FILE() { FZF_BASE_COMMAND --type f . "$@"; }
fi

function FZF_CAT_CMD() { command cat "$@"; }
function FZF_CAT_CMD_JSON() { command cat "$@"; }
# Use better cat if installed
if command -v bat &>/dev/null; then
  function FZF_CAT_CMD() {
    local color=()
    [ -z "$FZF_USE_COLOR" ] || color+=("--color=always")
    bat --style=numbers "${color[@]}" "$@"
  }
  function FZF_CAT_CMD_JSON() { FZF_CAT_CMD "--language" "JSON" "$@"; }
fi

function FZF_DIR_PREVIEW() {
  local color=()
  [ -z "$FZF_USE_COLOR" ] || color+=("--color=always")
  ls "${color[@]}" "$@"
}
if command -v tree &>/dev/null; then
  function FZF_DIR_PREVIEW() {
    local color=()
    [ -z "$FZF_USE_COLOR" ] || color+=("-C")
    tree "${color[@]}" "$@"
  }
fi

function FZF_FILE_PREVIEW() {
  local file="$1"
  local ext=${file##*.}
  case "$ext" in
  json | json5 | jsonc) ;; *)
    FZF_CAT_CMD "$file"
    return 0
    ;;
  esac

  local json
  # Attempt to prettify json before display
  # Prettier handles json5. jq doesn't!
  if command -v prettier; then
    if json=$(prettier --parser json5 <"$file" 2>/dev/null); then
      printf '%s\n' "$json" | FZF_CAT_CMD_JSON
      return 0
    fi
  elif command -v jq; then
    if json=$(jq . <"$file" 2>/dev/null); then
      printf '%s\n' "$json" | FZF_CAT_CMD_JSON -
      return 0
    fi
  fi
  FZF_CAT_CMD "$file"
  return 0
}

# Export the functions for subshell usage (IE, FZF)
export -f FZF_FIND_DIR FZF_FIND_FILE FZF_CAT_CMD FZF_CAT_CMD_JSON FZF_DIR_PREVIEW FZF_FILE_PREVIEW FZF_BASE_COMMAND
export FZF_DEFAULT_COMMAND="FZF_FIND_FILE ." # this is processed with a bash shell

fp() {
  local use_color=$FZF_USE_COLOR default_opts=$FZF_DEFAULT_OPTS
  local args=()
  while [ "$?" -gt 0 ]; do
    case "$1" in
    --help | -h)
      printf '%s\n' 'fp [--disable-color|-C] [PATH...]'
      printf '%s\n' 'Find files in PATH to output the choice'
      printf '%s\n' 'Opens editor if stdout is connected to a tty'
      return 0
      ;;
    --disable-color | -C) use_color='' default_opts='' ;;
    --) args+=("$@") && break ;;
    -*) printf '%s\n' "Invalid option -- $1" >&2 && return 1 ;;
    *) args+=("$1") ;;
    esac
  done

  local default_cmd="FZF_FIND_FILE ."
  [ ${#args[@]} -eq 0 ] || default_cmd="FZF_FIND_FILE ${args[*]@Q}"

  # Call with the path given, if applicable, and find all files
  output=$(
    FZF_DEFAULT_COMMAND=$default_cmd FZF_USE_COLOR=$use_color FZF_DEFAULT_OPTS=$default_opts \
      fzf --preview "FZF_FILE_PREVIEW {} | head -n500"
  )
  if [ -t 1 ] && [ -n "$output" ]; then editor "$output" || return && return; fi
  printf '%s' "$output"
}

# For finding directories
fpd() {
  local use_color=$FZF_USE_COLOR default_opts=$FZF_DEFAULT_OPTS
  local args=()
  while [ "$?" -gt 0 ]; do
    case "$1" in
    --help | -h)
      printf '%s\n' 'fpd [--disable-color|-C] [PATH...]'
      printf '%s\n' 'find directories in PATH to output the choice'
      return 0
      ;;
    --disable-color | -C) use_color='' default_opts='' ;;
    --) args+=("$@") && break ;;
    -*) printf '%s\n' "Invalid option -- $1" >&2 && return 1 ;;
    *) args+=("$1") ;;
    esac
  done
  local default_cmd="FZF_FIND_DIR ."
  [ ${#args[@]} -eq 0 ] || default_cmd="FZF_FIND_DIR ${args[*]@Q}"
  # Don't modify the shell environment:
  output=$(
    FZF_DEFAULT_COMMAND=$default_cmd FZF_USE_COLOR=$use_color FZF_DEFAULT_OPTS=$default_opts
    fzf --preview "FZF_DIR_PREVIEW {} | head -n500"
  )
  printf '%s' "$output"
  if [ -t 1 ] && [ -n "$output" ]; then builtin cd "$output" || return; fi
}
