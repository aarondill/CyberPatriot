#!/usr/bin/env bash

# ~/.bashrc.d/20_alias
#
# Sets up aliases for user usage
#

# I'm stupid and can't remember what to type
alias quit='exit'
alias :q='exit'
alias d='cd'
if ! has totem && has mpv; then
  alias totem='echo "maybe you meant mpv?" >&2 && mpv'
fi
if has nnn && ! has fff; then
  alias fff='echo "maybe you meant nnn?" >&2 && nnn'
fi
# Alias sudo to call sudo with *my* $HOME/ENV/PATH
# alias sudo="sudo -E env PATH=\"\$PATH\" "
alias sudo='sudo -E ' # dont use env so permitted commands still work
alias fd="fd -uu"     # Unrestrict fd by default
if has fdfind; then alias fd="fdfind -uu"; fi
alias rg="rg -uu -i"
alias rd='ripdrag -r'
alias rdt='ripdrag -ktr'
alias info='info --vi-keys'
alias dd="dd status=progress" # Show progress pls
alias mv="mv -i"              # Ask before overwriting
unmv() { mv -i "$2" "$1"; }   # Note: only works for simple moves.
alias cp="cp -ai"
alias rm="rm --preserve-root"

mkdirc() { mkdir -p -- "$1" && builtin cd -- "$1" || return; }
alias cdm=mkdirc
# alias cdtmp='cdm "$(mktemp -d)"'
alias cdtmp='cdm ~/tmp'

# Save history on exit
alias poweroff="history -a; /sbin/poweroff"
alias reboot="history -a; /sbin/reboot"
alias halt="history -a; /sbin/halt"
alias shutdown="history -a; /sbin/shutdown"
# Toggle capslock from terminal (bc capslock key is remapped)
alias capslock='xdotool key Caps_Lock'
alias CAPSLOCK='xdotool key Caps_Lock'
if has qmv; then
  alias qmv='qmv -f do'
fi

if has new; then alias new-java='new -l java'; fi

# alias backup="~/.backup/dobackup"
# alias lastbackup="/usr/bin/cat ~/.backup/backup-time"

browsers=(vivaldi vivaldi-stable firefox firefox-esr google-chrome google-chrome-stable)
for b in "${browsers[@]}"; do
  # shellcheck disable=SC2139 # These aliases should expand at definition
  if has "$b"; then
    alias "${b%-*}=$b" # remove everything after the last dash. browser-version --> browser
    alias browser="$b"
    export BROWSER="$b"
    break
  fi
done
unset browsers b

editors=(nvim vim code)
for e in "${editors[@]}"; do
  if has "$e"; then
    export EDITOR="$e" && break
  fi
done
unset editors e
if [ -n "${EDITOR:-}" ]; then
  # shellcheck disable=SC2139
  alias editor="$EDITOR"
  export VISUAL="$EDITOR"
fi

{
  # Don't show loopback, and show more useful columns
  _lsblk='lsblk -o NAME,MAJ:MIN,SIZE,FSTYPE,LABEL,MOUNTPOINT'
  if has snap; then _lsblk+=' -e 7'; fi
  # shellcheck disable=SC2139 # I exect it to expand now
  alias lsblk="$_lsblk"
  unset _lsblk
}

# Don't show /run/credentials/* in df or duf
if [ -d /run/credentials/ ]; then
  if has duf; then
    _hide=('/run/credentials/*')
    # shellcheck disable=SC2139
    alias duf="duf -hide-mp ${_hide@Q}"
    unset _hide
  fi
  if has df; then alias df="df --exclude-type=tmpfs"; fi
fi

alias cl='clear'
alias tree='tree -a' # show hidden
if has tty-clock; then alias clock='tty-clock  -sScbtrn'; fi

if has n; then alias n='sudo "$(which n)"'; fi

alias battery='upower -i $(upower -e | grep BAT)'   # Show battery information
if has zip; then alias secret-zip='zip -9ruvoe'; fi # alias for zipping files that should be hidden

if has chezmoi; then
  alias config='chezmoi'
  # shellcheck source=../.local/share/bash-completion/completions/config
  [ -f ~/.local/share/bash-completion/completions/config ] && source ~/.local/share/bash-completion/completions/config
fi

alias bc="bc --quiet --warn -l"
# if `bc` is installed set aliases for it
if has bc; then alias calc="bc"; fi

# if `pnpm` is installed set alias for pnpx
if has pnpm; then alias pnpx='pnpm dlx'; fi

# If tealdeer is installed set alias for tldr
if has tldr; then
  alias tldrf='tldr --list | fzf --preview "tldr {1} --color=always" --preview-window=right,70% | xargs -r tldr --pager'
fi

# Shorter lazygit
if has lazygit; then alias lg='lazygit'; fi

# Shorter git
if has git; then
  alias gitroot='cd "$(git rev-parse --show-toplevel)"'
  alias g='git'
  # Reuse git completion if present (overwritten already), else default to directories
  _complete=$(complete -p git 2>/dev/null || printf '%s ' complete -o bashdefault -o default -o nospace -F __git_wrap__git_main git)
  # remove ' git' and replace with ' g'
  [ -z "$_complete" ] || eval "${_complete% git} g"
  unset _complete
  # if not defined, just wait till git is used
  if has __load_completion; then
    __load_completion git
  fi
fi

alias gsudo='pkexec env GTK_THEME="$GTK_THEME" DISPLAY="$DISPLAY" XAUTHORITY="$XAUTHORITY" '
alias restart-ibus='ibus-daemon --xim -d -r'

# Don't you DARE open a window
alias emacs='emacs -nw'
alias ssh='TERM=xterm-256color ssh'

# Save history to ~/.cache/awesome
alias awesome-client='RLWRAP_HOME="$HOME/.cache/awesome" awesome-client'

if has ffplay; then
  alias aplay='ffplay -nodisp -hide_banner -autoexit'
fi

# Allow nvchad if it's installed
if [ -d "${NVCHAD_CONFIG:-"${XDG_CONFIG_HOME:-$HOME/.config}/NvChad"}" ]; then
  alias nvchad='NVIM_APPNAME=NvChad nvim'
else
  function nvchad-install() {
    local DESTINATION="${NVCHAD_CONFIG:-"${XDG_CONFIG_HOME:-$HOME/.config}/NvChad"}"
    printf '%s\n' "Creating a treeless clone of the nvchad repository in $DESTINATION"
    git clone --filter=tree:0 "https://github.com/NvChad/NvChad" "$DESTINATION" || {
      local err=$?
      printf 'Something went wrong while cloning the nvchad repository!' >&2
      return "$err"
    }
    alias nvchad='NVIM_APPNAME=NvChad nvim'
    printf '%s\n' 'Please run "nvchad" to complete the installation'
    unset -f nvchad-install
  }
fi
# https://nvchad.com/
