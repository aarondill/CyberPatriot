#!/usr/bin/env bash
set -euC -o pipefail
MIN_NODE_MAJOR=19

if command -v npm &>/dev/null; then
  root=$(npm prefix) && root=${root%/}
else
  root="$PWD" # start at current directory
  while ! [ -f "$root/package.json" ]; do
    dirname="$(dirname -- "$root")"
    if [ "$root" = "$dirname" ]; then
      root=''
      break # if we've reached root and can't find package.json, stop
    fi
    root="$dirname"
  done
fi
if [ -z "$root" ]; then
  printf '%s\n' "Could not find project root. Please ensure package.json exists!" >&2
  exit 1
fi
cd "$root"
# shellcheck source=./lib.sh # Note: this assumes the scripts dir is named '/scripts'
. "$root/scripts/lib.sh"

append_path "./node_modules/.bin"

if has_cmd node; then
  node_version="$(node --version)"
  log "Node version $node_version is currently installed"
  node_major="${node_version%%.*}"
  node_major="${node_major#v}"
  if [ -n "$node_major" ] && [ "$node_major" -ge "$MIN_NODE_MAJOR" ]; then
    log "Node v$node_major is >= $MIN_NODE_MAJOR! We have achieved setup."
    exit 0
  fi
  log "Node version is not high enough."
fi

if ! has_cmd n; then
  log "Attempting to install n using a package manager!"
  for cmd in "pnpm" "npm" "bun"; do
    has_cmd $cmd || continue
    log "Using $cmd"
    "$cmd" install n
    # Success! stop!
    if has_cmd n; then break; fi
  done
fi

n=$(command -v n 2>/dev/null || true)
args=(latest)
if [ -x "$n" ]; then
  log "Setting up node using $n!"
  verbose sudo "$n" "${args[@]}"
  exit
fi

log "Could not find n! Using curl to run n from github!"
tmp=$(mktemp)
trap 'rm -f "$tmp"' EXIT
download "https://raw.githubusercontent.com/tj/n/master/bin/n" "$tmp"
verbose sudo bash -- "$tmp" "${args[@]}"
rm "$tmp"
